本文是mnongodb server层调用wiredtiger api初始化的核心关键点流程：


wiredtiger_open：
步骤1：获取到数据目录的conn
wiredtiger/wiredtiger_kv_engine.cpp
WiredTigerKVEngine::WiredTigerKVEngine->wiredtiger_open(path.c_str(), &_eventHandler, config.c_str(), &_conn)
path: 数据目录
config： config: create,cache_size=61440M,session_max=20000,eviction=(threads_min=4,threads_max=4),
	config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),
	file_manager=(close_idle_time=100000),statistics_log=(wait=0),verbose=(recovery_progress)

步骤2：构造一个session
conn->open_session:
wiredtiger/wiredtiger_session_cache.cpp
invariantWTOK(conn->open_session(conn, NULL, "isolation=snapshot", &_session));


步骤3：session和指定表或者索引关联,建表或者建索引
s->create:
第一个地方
wiredtiger/wiredtiger_kv_engine.cpp
WiredTigerKVEngine::createGroupedRecordStore-> s->create(s, uri.c_str(), config.c_str())
uri类似：table:6--4057196034770697536.wt
config:type=file,memory_page_max=10m,split_pct=90,leaf_value_max=64MB,checksum=on,block_compressor=snappy,
	,key_format=q,value_format=u,app_metadata=(formatVersion=1),log=(enabled=true)
	
第二个地方
wiredtiger/wiredtiger_index.cpp
WiredTigerIndex::Create-> s->create(s, uri.c_str(), config.c_str());
uri: table:test/index/1-3924552931388685949 config: type=file,internal_page_max=16k,leaf_page_max=16k,checksum=on,block_compressor=,,,,key_format=u,value_format=u,app_metadata=(formatVersion=8,infoObj={ "v" : 2, "key" : { "yangt" : "hashed" }, "name" : "yangt_hashed", "ns" : "test.test", "background" : true }),log=(enabled=true)


//获取该session的一个cursor游标，这样就可以对指定表或者索引操作了
步骤4：
session->open_cursor：
第一个地方
wiredtiger/wiredtiger_index.cpp 
WiredTigerIndex::BulkBuilder:openBulkCursor
wiredtiger/wiredtiger_session_cache.cpp

第二个地方
wiredtiger/wiredtiger_session_cache.cpp:
//检查是否支持bulk功能
WiredTigerIndex::BulkBuilder :openBulkCursor(session, idx->uri().c_str(), NULL, "bulk,checkpoint_wait=false", &cursor); 
WiredTigerIndex::BulkBuilder :session->open_cursor(session, idx->uri().c_str(), NULL, NULL, &cursor)
uri类似：table:6--4057196034770697536.wt


